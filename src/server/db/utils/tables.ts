import {
  type ExtraConfigColumn,
  type PgColumnBuilderBase,
  pgTableCreator,
  type PgTableExtraConfig,
  timestamp,
  uuid,
} from "drizzle-orm/pg-core";
import {
  type ColumnBaseConfig,
  sql,
  type ColumnBuilderBaseConfig,
  type ColumnDataType,
} from "drizzle-orm";

export type DrizzleColumn = PgColumnBuilderBase<
  ColumnBuilderBaseConfig<ColumnDataType, string>,
  object
>;
export type DrizzleColumns = Record<string, DrizzleColumn>;

const commonColumns = {
  id: uuid("id").primaryKey().defaultRandom(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .$default(() => sql`NULL`)
    .$onUpdate(() => new Date()),
  deletedAt: timestamp("deleted_at"),
} as const satisfies DrizzleColumns;

/**
 * This is an example of how to use the multi-project schema feature of Drizzle ORM. Use the same
 * database instance for multiple projects.
 *
 * @see https://orm.drizzle.team/docs/goodies#multi-project-schema
 */
const TABLES_PREFIX = "spendy";
// Create the table creator with the prefix "spendy_"
const createPrefixedTable = pgTableCreator(
  (name) => `${TABLES_PREFIX}_${name}`,
);

type CommonColumnKeys = keyof typeof commonColumns;

/**
 * Type to warn against overriding commonColumns.
 */
type CommonOverrideWarning = {
  /**
   * @deprecated If not overridden, it will be added automatically.
   * @default UUIDv4 is auto-generated by default.
   * @summary Represents a unique identifier.
   */
  id?: unknown;
  /**
   * @deprecated If not overridden, it will be added automatically.
   * @default Auto-generated when the row is created.
   * @summary Timestamp indicating when the row was created.
   */
  createdAt?: unknown;
  /**
   * @deprecated If not overridden, it will be added automatically.
   * @default NULL
   * @summary Automatically updated on each row update.
   */
  updatedAt?: unknown;
  /**
   * @deprecated If not overridden, it will be added automatically.
   * @default NULL
   * @summary Intended for soft deletes.
   */
  deletedAt?: unknown;
};

type ParticularTableColumns = DrizzleColumns & CommonOverrideWarning;

// Use this code if you want to forbid overwriting commonColumns. This types will make overwriting throw an error.
// type ExcludedKeys = keyof typeof commonColumns;
// type ParticularTableColumns = DrizzleColumns &
//   Partial<Record<ExcludedKeys, never>>;

// Create a table with columns common to all tables
export const createTable = <
  TName extends string,
  TColumns extends ParticularTableColumns,
  X extends CommonColumnKeys[] = [],
>(
  name: TName,
  columns: TColumns,
  extraConfig?: (
    self: Record<
      Exclude<CommonColumnKeys, X[number]> | keyof TColumns,
      ExtraConfigColumn<ColumnBaseConfig<ColumnDataType, string>>
    >,
  ) => PgTableExtraConfig,
  optOutCommonColumns?: X,
) => {
  // Create a type that excludes the filtered columns
  type FilteredCommonColumns = Omit<typeof commonColumns, X[number]>;

  // If optOutCommonColumns is provided, filter out those columns
  const finalCommonColumns = (
    optOutCommonColumns?.length
      ? Object.fromEntries(
          Object.entries(commonColumns).filter(
            ([key]) => !optOutCommonColumns.includes(key as CommonColumnKeys),
          ),
        )
      : commonColumns
  ) as FilteredCommonColumns;

  return createPrefixedTable<TName, TColumns & FilteredCommonColumns>(
    name,
    { ...finalCommonColumns, ...columns },
    extraConfig,
  );
};